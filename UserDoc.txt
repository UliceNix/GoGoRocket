User Documentation

	This is a single player shooting game, named “Saucer”.
	To start the game, the player should change directory to game’s directory, then type in “./saucer” in the terminal window. 
	After the welcome menu shows up, a player could choose to view the high score board by typing H, start the game by typing S, or quit the game by using Q. The instruction are printed automatically when the player starts the game.
	While enjoying a easy shooting level, the player would use “,” and “.” to control the position of the launcher, moving the launcher to the left or right. Once a saucer appears, the player could place the launcher properly and press “SPACE” to shoot a rocket, which could destroy multiple saucers in the same coordinates but never saucers above it.
	As soon as the player scores enough points to go to level up, before entering the next level, the player would be asked if he/she would like to trade some scores for extra rockets. 
	If entering the store, the player could choose 1 of the 3 options or entering “Q” to quit the store and enter the next level up straight. 
	The game would go on until the player wants to fire a rocket when there is no rocket available. (Personally, I don’t think that the game stops when the player has no more rockets would be reasonable, since there would be some rockets that still are flying and trying to hit a saucer  successfully hitting a rocket and the player would earn one rocket to continue his/her game.) Or the the number of escaped saucers has reached a limit.
	When the game stops, the high score board would be printed out. If the player’s final score is high enough to be recorded into the high score board, then the game would prompt for the player’s username and write the new record.

Developer Documentation
Code Structure
	Starting from the main function, printUserMenu() and printInstruction() would be called first so that the game could give the user a nice user interface which shows what options could a player take, and the instruction about how to play the game. Then the main function will be waiting for the player’s input. Depending on the input, if “H” is pressed, the high score board will be printed out and the main function will not stop prompting for the user input; else if “Q” is pressed, the game will be terminated; else the “S” is printed, this will lead to the break out from the loop of prompting for the user input and the first level of the game.
	
Threads
Main thread:
	The main thread is responsible for handling the user input and running the game, including positioning the launcher, controlling gaming in each level, the store mode between each level, and printing the high score board and instructions.

Saucer threads:
	Each saucer thread has a main function named attack that has multiple sub functions which will take control of the movement of a saucer, and its escape, and the spawn process after either it is hit or has escaped.

Rocket threads:
	Each rocket thread will have a function that controls the movement of a rocket, a function that wipe the rocket off the screen once it hits a saucer. Additionally, a function named hitReward is responsible for adding scores and rewarding the player reasonable amount of rockets each time the rocket hits a saucer.

Critical Sections